// <auto-generated />
using System;
using CafeMenu.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CafeMenu.Data.Migrations
{
    [DbContext(typeof(CafeContext))]
    [Migration("20250717002045_Mig-002")]
    partial class Mig002
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CafeMenu.Data.Entities.Customers.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<byte?>("Age")
                        .HasColumnType("tinyint");

                    b.Property<int?>("CountOfOrders")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("MadeDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SexId")
                        .HasColumnType("int");

                    b.Property<long>("SumOfOrders")
                        .HasColumnType("bigint");

                    b.Property<string>("UserFNameLName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CustomerId");

                    b.HasIndex("SexId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Customers.CustomerPhoneNumber", b =>
                {
                    b.Property<int>("PhoneId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("PhoneId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerPhoneNumbers");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Customers.CustomerSex", b =>
                {
                    b.Property<int>("SexId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SexId"));

                    b.Property<string>("SexName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("SexId");

                    b.ToTable("CustomerSexes");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.DeleteHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeletedId")
                        .HasColumnType("int");

                    b.Property<string>("DeletedTableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DeleteHistories");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Discount.OrderDiscount", b =>
                {
                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<string>("DiscountCode")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<int>("MaxCountOfUsage")
                        .HasColumnType("int");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("DiscountId");

                    b.ToTable("OrderDiscounts");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Discount.ProductModelDiscount", b =>
                {
                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<string>("Event")
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<byte>("Percentage")
                        .HasColumnType("tinyint");

                    b.HasKey("DiscountId");

                    b.ToTable("ProductModelDiscounts");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Order.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPayed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderDescription")
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<int?>("OrderRawSum")
                        .HasColumnType("int");

                    b.Property<int?>("OrderTotalSum")
                        .HasColumnType("int");

                    b.Property<int?>("OrderTransportSum")
                        .HasColumnType("int");

                    b.Property<int>("OrderTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("TableId")
                        .HasColumnType("int");

                    b.Property<int>("TaxId")
                        .HasColumnType("int");

                    b.Property<int?>("TaxPrice")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("OrderTypeId");

                    b.HasIndex("TableId");

                    b.HasIndex("TaxId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Order.OrderTax", b =>
                {
                    b.Property<int>("TaxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaxId"));

                    b.Property<int>("Percentage")
                        .HasColumnType("int");

                    b.HasKey("TaxId");

                    b.ToTable("OrderTaxes");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Order.OrderType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeId"));

                    b.Property<string>("TypeTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TypeId");

                    b.ToTable("OrderTypes");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Order.SubOrder", b =>
                {
                    b.Property<int>("SubOrderId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductModelId")
                        .HasColumnType("int");

                    b.HasKey("SubOrderId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductModelId");

                    b.ToTable("SubOrders");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Order.Table", b =>
                {
                    b.Property<int>("TableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TableId"));

                    b.Property<int>("TableCount")
                        .HasColumnType("int");

                    b.Property<string>("TableIcon")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TableId");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Product.ExteraProduct", b =>
                {
                    b.Property<int>("EPId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EPId"));

                    b.Property<string>("ExteraOnItemTitle")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("EPId");

                    b.ToTable("ExteraProducts");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Product.ExteraProductSubOrderConnection", b =>
                {
                    b.Property<int>("ConnectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConnectionId"));

                    b.Property<int>("ExtraProductId")
                        .HasColumnType("int");

                    b.Property<int>("SubOrderId")
                        .HasColumnType("int");

                    b.HasKey("ConnectionId");

                    b.HasIndex("ExtraProductId");

                    b.HasIndex("SubOrderId");

                    b.ToTable("ExteraProductSubOrderConnections");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Product.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("ProductDescription")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ProductGroupId")
                        .HasColumnType("int");

                    b.Property<string>("ProductImage")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ProductIngredients")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ProductSubGroupId")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("ProductGroupId");

                    b.HasIndex("ProductSubGroupId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Product.ProductExteraConnection", b =>
                {
                    b.Property<int>("ConnectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConnectionId"));

                    b.Property<int>("ExtraProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ConnectionId");

                    b.HasIndex("ExtraProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductExteraConnections");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Product.ProductGroup", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupId"));

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("GroupId");

                    b.HasIndex("ParentId");

                    b.ToTable("ProductGroups");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Product.ProductModel", b =>
                {
                    b.Property<int>("ProducModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProducModelId"));

                    b.Property<int?>("AvaibleCount")
                        .HasColumnType("int");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvaible")
                        .HasColumnType("bit");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductPrice")
                        .HasColumnType("int");

                    b.HasKey("ProducModelId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductModels");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.User.Connections.RolePermissionConnection", b =>
                {
                    b.Property<int>("RPCId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RPCId"));

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("RPCId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissionConnections");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.User.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionId"));

                    b.Property<string>("PermissionTitle")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("PermissionId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.User.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.User.Sex", b =>
                {
                    b.Property<int>("SexId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SexId"));

                    b.Property<string>("SexName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("SexId");

                    b.ToTable("Sexes");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.User.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("ActiveCodeForEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActiveCodeForPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<byte?>("Age")
                        .HasColumnType("Tinyint");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EmailIsActived")
                        .HasColumnType("bit");

                    b.Property<string>("NationalCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("PhoneNumberIsActived")
                        .HasColumnType("bit");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("SexId")
                        .HasColumnType("int");

                    b.Property<bool>("TotalIsActive")
                        .HasColumnType("bit");

                    b.Property<string>("UseFullName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.HasIndex("SexId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Customers.Customer", b =>
                {
                    b.HasOne("CafeMenu.Data.Entities.Customers.CustomerSex", "Sex")
                        .WithMany("Customers")
                        .HasForeignKey("SexId");

                    b.Navigation("Sex");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Customers.CustomerPhoneNumber", b =>
                {
                    b.HasOne("CafeMenu.Data.Entities.Customers.Customer", "Customer")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Order.Order", b =>
                {
                    b.HasOne("CafeMenu.Data.Entities.Customers.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CafeMenu.Data.Entities.Discount.OrderDiscount", "OrderDiscount")
                        .WithMany("Orders")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CafeMenu.Data.Entities.Order.OrderType", "OrderType")
                        .WithMany("Orders")
                        .HasForeignKey("OrderTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CafeMenu.Data.Entities.Order.Table", "Table")
                        .WithMany("Orders")
                        .HasForeignKey("TableId");

                    b.HasOne("CafeMenu.Data.Entities.Order.OrderTax", "OrderTax")
                        .WithMany("Orders")
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("OrderDiscount");

                    b.Navigation("OrderTax");

                    b.Navigation("OrderType");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Order.SubOrder", b =>
                {
                    b.HasOne("CafeMenu.Data.Entities.Order.Order", "Order")
                        .WithMany("SubOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CafeMenu.Data.Entities.Product.ProductModel", "ProductModel")
                        .WithMany("SubOrders")
                        .HasForeignKey("ProductModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ProductModel");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Product.ExteraProductSubOrderConnection", b =>
                {
                    b.HasOne("CafeMenu.Data.Entities.Product.ExteraProduct", "ExteraProduct")
                        .WithMany("ExteraProductSubOrderConnections")
                        .HasForeignKey("ExtraProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CafeMenu.Data.Entities.Order.SubOrder", "SubOrder")
                        .WithMany("ExteraProductSubOrderConnections")
                        .HasForeignKey("SubOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExteraProduct");

                    b.Navigation("SubOrder");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Product.Product", b =>
                {
                    b.HasOne("CafeMenu.Data.Entities.Product.ProductGroup", "ProductGroup")
                        .WithMany("Products")
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CafeMenu.Data.Entities.Product.ProductGroup", "ProductSubGroup")
                        .WithMany("SubProducts")
                        .HasForeignKey("ProductSubGroupId");

                    b.Navigation("ProductGroup");

                    b.Navigation("ProductSubGroup");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Product.ProductExteraConnection", b =>
                {
                    b.HasOne("CafeMenu.Data.Entities.Product.ExteraProduct", "ExteraProduct")
                        .WithMany("ProductExteraConnections")
                        .HasForeignKey("ExtraProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CafeMenu.Data.Entities.Product.Product", "Product")
                        .WithMany("ProductExteraConnections")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExteraProduct");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Product.ProductGroup", b =>
                {
                    b.HasOne("CafeMenu.Data.Entities.Product.ProductGroup", null)
                        .WithMany("ProducParenttGroups")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Product.ProductModel", b =>
                {
                    b.HasOne("CafeMenu.Data.Entities.Discount.ProductModelDiscount", "ModelDiscount")
                        .WithMany("ProductModels")
                        .HasForeignKey("DiscountId");

                    b.HasOne("CafeMenu.Data.Entities.Product.Product", "Product")
                        .WithMany("Models")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModelDiscount");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.User.Connections.RolePermissionConnection", b =>
                {
                    b.HasOne("CafeMenu.Data.Entities.User.Permission", "Permission")
                        .WithMany("RolePermissionConnections")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CafeMenu.Data.Entities.User.Role", "Role")
                        .WithMany("RolePermissionConnections")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.User.User", b =>
                {
                    b.HasOne("CafeMenu.Data.Entities.User.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CafeMenu.Data.Entities.User.Sex", "Sex")
                        .WithMany("Users")
                        .HasForeignKey("SexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Sex");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Customers.Customer", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("PhoneNumbers");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Customers.CustomerSex", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Discount.OrderDiscount", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Discount.ProductModelDiscount", b =>
                {
                    b.Navigation("ProductModels");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Order.Order", b =>
                {
                    b.Navigation("SubOrders");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Order.OrderTax", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Order.OrderType", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Order.SubOrder", b =>
                {
                    b.Navigation("ExteraProductSubOrderConnections");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Order.Table", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Product.ExteraProduct", b =>
                {
                    b.Navigation("ExteraProductSubOrderConnections");

                    b.Navigation("ProductExteraConnections");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Product.Product", b =>
                {
                    b.Navigation("Models");

                    b.Navigation("ProductExteraConnections");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Product.ProductGroup", b =>
                {
                    b.Navigation("ProducParenttGroups");

                    b.Navigation("Products");

                    b.Navigation("SubProducts");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.Product.ProductModel", b =>
                {
                    b.Navigation("SubOrders");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.User.Permission", b =>
                {
                    b.Navigation("RolePermissionConnections");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.User.Role", b =>
                {
                    b.Navigation("RolePermissionConnections");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CafeMenu.Data.Entities.User.Sex", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
